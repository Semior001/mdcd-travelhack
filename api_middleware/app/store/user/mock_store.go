// Code generated by mockery v1.0.0. DO NOT EDIT.

package user

import mock "github.com/stretchr/testify/mock"

// MockStore is an autogenerated mock type for the Store type
type MockStore struct {
	mock.Mock
}

// Delete provides a mock function with given fields: id
func (_m *MockStore) Delete(id uint64) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: id
func (_m *MockStore) Get(id uint64) (User, error) {
	ret := _m.Called(id)

	var r0 User
	if rf, ok := ret.Get(0).(func(uint64) User); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAuthData provides a mock function with given fields: id
func (_m *MockStore) GetAuthData(id uint64) (string, string, map[string]bool, error) {
	ret := _m.Called(id)

	var r0 string
	if rf, ok := ret.Get(0).(func(uint64) string); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(uint64) string); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 map[string]bool
	if rf, ok := ret.Get(2).(func(uint64) map[string]bool); ok {
		r2 = rf(id)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(map[string]bool)
		}
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(uint64) error); ok {
		r3 = rf(id)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// GetByEmail provides a mock function with given fields: email
func (_m *MockStore) GetByEmail(email string) (User, error) {
	ret := _m.Called(email)

	var r0 User
	if rf, ok := ret.Get(0).(func(string) User); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Get(0).(User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields:
func (_m *MockStore) List() ([]User, error) {
	ret := _m.Called()

	var r0 []User
	if rf, ok := ret.Get(0).(func() []User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: user
func (_m *MockStore) Update(user User) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// put provides a mock function with given fields: user
func (_m *MockStore) put(user User) (uint64, error) {
	ret := _m.Called(user)

	var r0 uint64
	if rf, ok := ret.Get(0).(func(User) uint64); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
