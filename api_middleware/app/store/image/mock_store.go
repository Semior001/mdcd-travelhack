// Code generated by mockery v1.0.0. DO NOT EDIT.

package image

import mock "github.com/stretchr/testify/mock"

// MockStore is an autogenerated mock type for the Store type
type MockStore struct {
	mock.Mock
}

// CheckBarcode provides a mock function with given fields: barcode
func (_m *MockStore) CheckBarcode(barcode string) (bool, error) {
	ret := _m.Called(barcode)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(barcode)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(barcode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBackgroundIds provides a mock function with given fields:
func (_m *MockStore) GetBackgroundIds() ([]uint64, error) {
	ret := _m.Called()

	var r0 []uint64
	if rf, ok := ret.Get(0).(func() []uint64); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]uint64)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// getImage provides a mock function with given fields: id
func (_m *MockStore) getImage(id uint64) (Image, error) {
	ret := _m.Called(id)

	var r0 Image
	if rf, ok := ret.Get(0).(func(uint64) Image); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(Image)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// getImgByBarcode provides a mock function with given fields: barcode
func (_m *MockStore) getImgByBarcode(barcode string) (Image, error) {
	ret := _m.Called(barcode)

	var r0 Image
	if rf, ok := ret.Get(0).(func(string) Image); ok {
		r0 = rf(barcode)
	} else {
		r0 = ret.Get(0).(Image)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(barcode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// putImage provides a mock function with given fields: imgMetaData
func (_m *MockStore) putImage(imgMetaData Image) (uint64, error) {
	ret := _m.Called(imgMetaData)

	var r0 uint64
	if rf, ok := ret.Get(0).(func(Image) uint64); ok {
		r0 = rf(imgMetaData)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(Image) error); ok {
		r1 = rf(imgMetaData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
